{"ast":null,"code":"export function dijkstras(grid, start_node, end_node) {\n  const visitedNodesInOrder = [];\n  const unvisitedNodes = getAllNodes(grid);\n  start_node.distance = 0;\n\n  while (unvisitedNodes.length !== 0) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    closestNode.isVisited = true;\n    if (closestNode.isWall) continue; // If the closest node is at a distance of infinity,\n    // We must be trapped and should therefore stop.\n\n    if (closestNode.distance === 1000000000) return visitedNodesInOrder;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === end_node) return visitedNodesInOrder;\n    updateNeighbors(closestNode, grid);\n  }\n\n  return visitedNodesInOrder;\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => {\n    return nodeA.distance - nodeB.distance;\n  });\n}\n\nfunction updateNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const nodes of unvisitedNeighbors) {\n    nodes.distance = node.distance + 1;\n    nodes.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    row,\n    col\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(node => !node.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n}\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["/home/jagruth/Documents/path finding/src/Algorithm/Dijkstra.js"],"names":["dijkstras","grid","start_node","end_node","visitedNodesInOrder","unvisitedNodes","getAllNodes","distance","length","sortNodesByDistance","closestNode","shift","isVisited","isWall","push","updateNeighbors","sort","nodeA","nodeB","node","unvisitedNeighbors","getUnvisitedNeighbors","nodes","previousNode","neighbors","row","col","filter","getNodesInShortestPathOrder","finishNode","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"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","sourcesContent":["export function dijkstras(grid, start_node, end_node) {\n  const visitedNodesInOrder = [];\n  const unvisitedNodes = getAllNodes(grid);\n  start_node.distance = 0;\n\n  while (unvisitedNodes.length !== 0) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    closestNode.isVisited = true;\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // We must be trapped and should therefore stop.\n    if (closestNode.distance === 1000000000) return visitedNodesInOrder;\n    visitedNodesInOrder.push(closestNode);\n\n    if (closestNode === end_node) return visitedNodesInOrder;\n\n    updateNeighbors(closestNode, grid);\n  }\n  return visitedNodesInOrder;\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => {\n    return nodeA.distance - nodeB.distance;\n  });\n}\n\nfunction updateNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const nodes of unvisitedNeighbors) {\n    nodes.distance = node.distance + 1;\n    nodes.previousNode = node;          \n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { row, col } = node;\n\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n\n  return neighbors.filter((node) => !node.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n"]},"metadata":{},"sourceType":"module"}