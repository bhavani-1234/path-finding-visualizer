{"ast":null,"code":"import * as constants from \"../Constants\";\nimport { dijkstras, getNodesInShortestPathOrder } from \"./Dijkstra\";\nimport { solve_dfs, getNodesInShortestPathOrderDFS } from \"./DepthFirstSearch\";\nimport { solve_bfs, getNodesInShortestPathOrderBFS } from \"./BreadthFirstSearch\";\nimport { solve_astar, getNodesInShortestPathOrderASTAR } from \"./ASearch\";\n\nfunction get_paths(state_grid, start_row, start_col, end_row, end_col, algo_type) {\n  var grid = JSON.parse(JSON.stringify(state_grid));\n  var start_node = grid[start_row][start_col];\n  var end_node = grid[end_row][end_col];\n  var visitedNodesInOrder = [];\n  var nodesInShortestPathOrder = [];\n\n  switch (algo_type) {\n    case constants.DIJK:\n      {\n        visitedNodesInOrder = dijkstras(grid, start_node, end_node);\n        nodesInShortestPathOrder = getNodesInShortestPathOrder(end_node);\n        break;\n      }\n\n    case constants.DFS_NORM:\n      {\n        visitedNodesInOrder = solve_dfs(grid, start_node, end_node, 1);\n        nodesInShortestPathOrder = getNodesInShortestPathOrderDFS();\n        break;\n      }\n\n    case constants.BFS:\n      {\n        visitedNodesInOrder = solve_bfs(grid, start_node, end_node);\n        nodesInShortestPathOrder = getNodesInShortestPathOrderBFS(end_node);\n        break;\n      }\n\n    case constants.ASTAR:\n      {\n        visitedNodesInOrder = solve_astar(grid, start_node, end_node);\n        nodesInShortestPathOrder = getNodesInShortestPathOrderASTAR(end_node);\n        break;\n      }\n\n    default:\n      break;\n  }\n\n  return [visitedNodesInOrder, nodesInShortestPathOrder];\n}\n\nfunction middle_case(state_grid, start_row, start_col, end_row, end_col, mid_row, mid_col, algo_type) {\n  var visitedNodesInOrder = [];\n  var visitedNodesInOrder2 = [];\n  var nodesInShortestPathOrder = [];\n  var nodesInShortestPathOrder2 = [];\n  var ret;\n  ret = get_paths(state_grid, start_row, start_col, mid_row, mid_col, algo_type);\n  visitedNodesInOrder = ret[0];\n  nodesInShortestPathOrder = ret[1];\n  ret = get_paths(state_grid, mid_row, mid_col, end_row, end_col, algo_type);\n  visitedNodesInOrder2 = ret[0];\n  nodesInShortestPathOrder2 = ret[1];\n\n  for (let i in visitedNodesInOrder2) {\n    visitedNodesInOrder.push(visitedNodesInOrder2[i]);\n  }\n\n  for (let i in nodesInShortestPathOrder2) {\n    nodesInShortestPathOrder.push(nodesInShortestPathOrder2[i]);\n  }\n\n  return [visitedNodesInOrder, nodesInShortestPathOrder];\n}\n\nexport function solve_algorithm(state_grid, start_row, start_col, end_row, end_col, mid_row, mid_col, algo_type) {\n  if (mid_row === -1) {\n    return get_paths(state_grid, start_row, start_col, end_row, end_col, algo_type);\n  } else {\n    return middle_case(state_grid, start_row, start_col, end_row, end_col, mid_row, mid_col, algo_type);\n  }\n}","map":{"version":3,"sources":["/home/jagruth/Documents/path finding/src/Algorithm/RootCaller.js"],"names":["constants","dijkstras","getNodesInShortestPathOrder","solve_dfs","getNodesInShortestPathOrderDFS","solve_bfs","getNodesInShortestPathOrderBFS","solve_astar","getNodesInShortestPathOrderASTAR","get_paths","state_grid","start_row","start_col","end_row","end_col","algo_type","grid","JSON","parse","stringify","start_node","end_node","visitedNodesInOrder","nodesInShortestPathOrder","DIJK","DFS_NORM","BFS","ASTAR","middle_case","mid_row","mid_col","visitedNodesInOrder2","nodesInShortestPathOrder2","ret","i","push","solve_algorithm"],"mappings":"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","sourcesContent":["import * as constants from \"../Constants\";\nimport { dijkstras, getNodesInShortestPathOrder } from \"./Dijkstra\";\nimport { solve_dfs, getNodesInShortestPathOrderDFS } from \"./DepthFirstSearch\";\nimport { solve_bfs, getNodesInShortestPathOrderBFS,} from \"./BreadthFirstSearch\";\nimport { solve_astar, getNodesInShortestPathOrderASTAR } from \"./ASearch\";\n\nfunction get_paths(state_grid,start_row,start_col,end_row,end_col,algo_type) {\n  var grid = JSON.parse(JSON.stringify(state_grid));\n  var start_node = grid[start_row][start_col];\n  var end_node = grid[end_row][end_col];\n  var visitedNodesInOrder = [];\n  var nodesInShortestPathOrder = [];\n\n  switch (algo_type) {\n    case constants.DIJK: {\n      visitedNodesInOrder = dijkstras(grid, start_node, end_node);\n      nodesInShortestPathOrder = getNodesInShortestPathOrder(end_node);\n      break;\n    }\n    case constants.DFS_NORM: {\n      visitedNodesInOrder = solve_dfs(grid, start_node, end_node, 1);\n      nodesInShortestPathOrder = getNodesInShortestPathOrderDFS();\n      break;\n    }\n    case constants.BFS: {\n      visitedNodesInOrder = solve_bfs(grid, start_node, end_node);\n      nodesInShortestPathOrder = getNodesInShortestPathOrderBFS(end_node);\n      break;\n    }\n    case constants.ASTAR: {\n      visitedNodesInOrder = solve_astar(grid, start_node, end_node);\n      nodesInShortestPathOrder = getNodesInShortestPathOrderASTAR(end_node);\n      break;\n    }\n    default:\n      break;\n  }\n  return [visitedNodesInOrder, nodesInShortestPathOrder];\n}\n\nfunction middle_case(state_grid,start_row,start_col,end_row,end_col,mid_row,mid_col,algo_type) {\n  var visitedNodesInOrder = [];\n  var visitedNodesInOrder2 = [];\n  var nodesInShortestPathOrder = [];\n  var nodesInShortestPathOrder2 = [];\n  var ret;\n\n  ret = get_paths(state_grid,start_row,start_col,mid_row,mid_col,algo_type);\n  visitedNodesInOrder = ret[0];\n  nodesInShortestPathOrder = ret[1];\n  ret = get_paths(state_grid, mid_row, mid_col, end_row, end_col, algo_type);\n  visitedNodesInOrder2 = ret[0];\n  nodesInShortestPathOrder2 = ret[1];\n\n  for (let i in visitedNodesInOrder2) {\n    visitedNodesInOrder.push(visitedNodesInOrder2[i]);\n  }\n  for (let i in nodesInShortestPathOrder2) {\n    nodesInShortestPathOrder.push(nodesInShortestPathOrder2[i]);\n  }\n\n  return [visitedNodesInOrder, nodesInShortestPathOrder];\n}\n\nexport function solve_algorithm(state_grid,start_row,start_col,end_row,end_col,mid_row,mid_col,algo_type) {\n  if (mid_row === -1) {\n    return get_paths(state_grid,start_row,start_col,end_row,end_col,algo_type);\n  } \n  else {\n    return middle_case(state_grid,start_row,start_col,end_row,end_col,mid_row,mid_col,algo_type);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}